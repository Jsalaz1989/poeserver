# syntax=docker/dockerfile:1

### BUILD ###

# pull official base image
FROM python:3.10.0-slim-buster AS venv

# grab arg from docker-compose.yml
ARG DJANGO_ENV

# set env vars
ENV DJANGO_ENV=${DJANGO_ENV} \
  # python
  PYTHONFAULTHANDLER=1 \
  PYTHONUNBUFFERED=1 \
  PYTHONHASHSEED=random \
  # pip
  PIP_NO_CACHE_DIR=off \
  PIP_DISABLE_PIP_VERSION_CHECK=on \
  PIP_DEFAULT_TIMEOUT=100 \
  # poetry
  POETRY_VERSION=1.1.11 \
#   POETRY_VIRTUALENVS_CREATE=false \
#   POETRY_VIRTUALENVS_IN_PROJECT=true \
  POETRY_CACHE_DIR='/var/cache/pypoetry'
ENV PATH /root/.poetry/bin:$PATH

# system deps
RUN apt-get update \
  && apt-get install --no-install-recommends -y \
    bash \
    build-essential \
    curl \
    gettext \
    git \
    libpq-dev \
    wget \
  # cleaning cache
  && apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/* \
  # install poetry
  && pip install "poetry==$POETRY_VERSION" && poetry --version

# set work directory
WORKDIR /home/app/web

# copy dependencies
COPY pyproject.toml /home/app//web
COPY wheels /home/app/web/wheels

# The `--copies` option tells `venv` to copy libs and binaries
# instead of using links (which could break since we will
# extract the virtualenv from this image)
RUN python -m venv --copies /home/app/web/.venv
RUN . /home/app/web/.venv/bin/activate && poetry install


### PRODUCTION ###

# pull official base image
FROM python:3.10.0-slim-buster as prod

# create directory for the app user
RUN mkdir -p /home/app

# create the app user
# RUN addgroup -S app && adduser -S app -G app
RUN adduser --system --group app

# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME
RUN mkdir $APP_HOME/staticfiles
RUN mkdir $APP_HOME/mediafiles
WORKDIR $APP_HOME

COPY --from=venv /home/app/web/.venv "$APP_HOME/.venv/"

# activate virtual environment
ENV VIRTUAL_ENV="$APP_HOME/.venv"
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# copy project
COPY . $APP_HOME

# install netcat, required for nc command in entrypoint.sh
RUN apt-get update && apt-get install -y netcat

# chown all the files to the app user
RUN chown -R app:app $APP_HOME

# change to the app user
USER app

# run entrypoint.prod.sh
ENTRYPOINT ["/home/app/web/entrypoint.prod.sh"]